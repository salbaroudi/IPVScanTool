Picture/Diagram scanning system:

Proposal: A fast, standardized method for scanning in images and documents is needed.
Let's use an IPEVO-Ziggi HD[1] camera and its software to help facilitate this.

Currently, document scanning involves a laborious process of:

(1) Aligning the camera for every new job - (with three degrees of freedom)
(2) Saving the images to disk
(3) Opening the images in Pinta
(4) Editing and cropping the images, 
(5) Saving and renaming the images
(6) Placing them in the respective folder they belong.


To save time and streamline the process, a lot of these steps can be avoided. In particular, the following things can be improved,
or are just wasteful:

- The camera often, because different documents are different sizes.
- A lot of time is spent lining up the documents straight (because there are no standard guides)
- Files are manually renamed.
- The Pinta operations could be automated if proper standardization is used.

To severely cut down on the amount of time and energy that is wasted, I  propose the following:

1) Fix the camera in a default position, with markings on a board to just line it up once.
2) Use the maximal resolution setting, and place the camera as high as possible. Thus all sizes of documents can be scanned,
and fine details can still be maintained (mostly - not a huge tradeoff).
3) Many editing operations can be done in python. In particular:
	-Cropping: with absolute coordinates, or edge detection of a rectangle (using a contrasting board or pieces of black cardboard).
	- automated naming: just pick a name and add numbers to the end.
	- image rotation
	- color manipulation: color inversion or B&W settings.
4) You should be able to pipe data from the save folder, to the script, and output to a folder of your choosing.

Then, with a few simple tools and a python script this should be achieveable.

Script Requirements: Input settings and parameters:

ipvscantools -h -v -d -i -n [filenaming] [folder to read] [folder to write to]

	-h: Help string for console
	-v: version information
	-d: delete temp files in folder, after you are done (stupidly hunts for all .jpg files, and kills them). 
	-n: prefix for naming of files.
	-i: invert image colors
	
	Other requirements: 
	- if input files have timestamps, they need to be sorted and processed in that order.
	- assume: images need to be rotated, and edge detection needs to be done.
	- if no name given for files, just start with 1,2,3....
	- images are saved as .png files.
	- Max document size: European Letter paper (A4)
	- if a folder is given as a destination, and does not exist, simply create it!

General Usage of the Script:

I have a pile of documents to scan. Before hand, I sort them into discrete piles (folders), and arrange them in the order I want them to be scanned.
In my temporary work folder, I make a new folder as a home for the images. Next, I turn on the IPEVO camera, set it up, and scan each image one by one.
These documents are saved to the standard Google Chromium download folder (setup beforehand).

Next, IPVscanpipe is run. Options are chosen, the input and output folders encoded, and run.

Using Dolphin (or another GUI), I take a look at the processed images, and place them locally in my work folder.

This process repeats until all my scans are done.

References:
[1] Ipevo Ziggi-HD Camera: https://www.amazon.com/Ipevo-Ziggi-HD-High-Definition-Document-CDVU-06IP/dp/B01530XGMA/ref=sr_1_1?ie=UTF8&qid=1488480267&sr=8-1&keywords=Ipevo+Ziggi-hd
