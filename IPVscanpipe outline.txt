Picture/Diagram scanning system:

Proposal: I wish to have a fast, standardized method for scanning in images and documents into my computer,
Using an IPEVO-Ziggi HD camera and its software.

Currently, document scanning involves a laborious process of:

(1) Aligning the camera for every new job - (with three degrees of freedom)
(2) Saving the images to disk
(3)Opening the images in Pinta
(4) Editing and cropping the images, 
(5) Saving and renaming the images
(6) Placing them in the respective folder they belong.


To save time, and streamline the process, a lot of these steps can be avoided. In particular, the following things can be improved,
or are just wasteful (in terms of Energy and Time):

- You move the camera often, because different documents are different sizes.
- You spend a lot of time lining up the documents straight (because there are no standard guides)
- You manually rename files.
- Directories where the files go are usually 5+ layers deep (in my "Universe" folder).
- The Pinta operations could be automated if proper standardization is used.

To severely cut down on the amount of time and energy I waste, I propose the following:

1) Fix the camera in a default position, with markings on a board to just line it up once.
2) Use the maximal resolution setting, and place the camera as high as possible. Thus all sizes of documents can be scanned,
and fine details can still be maintained (mostly - not a huge tradeoff).
3) Keep all work for the week in a shallow folder in the /home folder. This is what you are currently working on, and where documents should be 
scanned to. You can dive deep and place files where they belong at the end of the week (or month).
4) Many editing operations can be done in python. In particular:
	-Cropping: with absolute coordinates, or edge detection of a rectangle (using a contrasting board or pieces of black cardboard).
	- automated naming: just pick a name and add numbers to the end
	- image rotation
	- color manipulation: color inversion or B&W settings.
5) You should be able to pipe data from the save folder, to the script, and output to a folder of your choosing.

Then, with a few simple tools and a python script this should be achieveable.

Script Requirements and API:

pscantools -h -v -d -i -n [filenaming] [folder to read] [folder to write to]

	-h: Help string for console
	-v: version information
	-d: delete temp files in folder, after you are done (stupidly hunts for all .jpg files, and kills them). 
	-n: prefix for naming of files.
	-i: invert image colors
	
	Other requirements: 
	- if input files have timestamps, they need to be sorted and processed in that order.
	- assume: images need to be rotated, and edge detection needs to be done.
	- if no name given for files, just start with 1,2,3....
	- images are saved as .png files.
	- Max document size: European Letter paper (A4)
	- if a folder is given as a destination, and does not exist, simply create it!

General Usage of the Script:

I have a pile of documents to scan. Before hand, i sort them into discrete piles (folders), and arrange them in the order I want them to be scanned.
In my temporary work folder, I make a new folder as a home for the images. Next, I turn on the IPEVO camera, set it up, and scan each image one by one.
These documents are saved to the standard Google Chromium download folder (setup beforehand).

Next, IPVscanpipe is run. Options are chosen, the input and output folders encoded, and run.

Using Dolphin (or another GUI), I take a look at the processed images, and place them locally in my work folder.

This process repeats until all my scans are done.

Order of Development:

- standardization of setup and hardware
- setup folders and save areas; can things be partitioned?
- getopt usage
- code help and version information
- experiment with Python image library
      - opening files
      - rotate files
      - save files as png
      - invert colors
      - basic black/white edge detection
			=> Finding points to define a crop square
			=> cropping an image in general
	  - read list of file, organize by timestamp iteration?
